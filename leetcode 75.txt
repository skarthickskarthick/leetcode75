Arrays/Strings

1)1768. Merge Strings Alternately

class Solution {
    public String mergeAlternately(String word1, String word2) {
        String ans="";
        char w1[]=word1.toCharArray();
        char w2[]=word2.toCharArray();
        int n=0;
        if(word1.length()<word2.length())
        n=word2.length();
        else
        n=word1.length();
        for(int i=0;i<n;i++)
        
        {
           if(i<word1.length())
           ans+=w1[i];
           if(i<word2.length())
           ans+=w2[i];
        }
        return ans;
    }
}

2)1071. Greatest Common Divisor of Strings

class Solution {
    public String gcdOfStrings(String str1, String str2) {
        if (!(str1 + str2).equals(str2 + str1)){
            return "";
        }
        int j=gcd(str1.length(), str2.length());
        return str1.substring(0,j);
    }
    public static int gcd(int a, int b) {
        if (b == 0) {
          return a;
        }
    return gcd(b, a % b); 
  }
}



3)1431. Kids With the Greatest Number of Candies

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        int max=0;
        List<Boolean> l=new ArrayList<Boolean>();
        for(int i=0;i<candies.length;i++)
        {
            if(candies[i]>max)
            max=candies[i];
            candies[i]=candies[i]+extraCandies;
            
        }
        for(int i=0;i<candies.length;i++)
        {
            if(candies[i]>=max)
            l.add(true);
            else
            l.add(false);

        }
        return l;
    }
}


4)605. Can Place Flowers

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count=0;
        if(flowerbed.length==1)
        return n<=1&&flowerbed[0]==0||n==0?true:false;
        if(flowerbed[0]==0&&flowerbed[1]==0){
        count++;
        flowerbed[0]=1;
        }
        for(int i=1;i<flowerbed.length-1;i++)
        {
            if(flowerbed[i]==0&&flowerbed[i-1]==0&&flowerbed[i+1]==0){
            count++;
            flowerbed[i]=1;
            }
        }
        
        if(flowerbed[flowerbed.length-1]==0&&flowerbed[flowerbed.length-2]==0)
        count++;
        return n<=count?true:false;
    }
}



5)345. Reverse Vowels of a String

class Solution {
    public String reverseVowels(String s) {
        int l=0,r=s.length()-1;
        char c[]=s.toCharArray();
        String vow="AEIOUaeiou";
        while(l<r)
        {
            if(!vow.contains(String.valueOf(c[l])))
            l++;
            else if(!vow.contains(String.valueOf(c[r])))
            r--;
            else{
            char temp=c[l];
            c[l]=c[r];
            c[r]=temp;
            l++;
            r--;

            }
        }
        return new String(c);
        
    }
}


6)151. Reverse Words in a String

class Solution {
    public String reverseWords(String s) {
        String ans="",temp="";
        s.trim();
        int flag=0;
        s=" "+s;
        for(int i=s.length()-1;i>=0;i--)
        {
            if(s.charAt(i)==' '&&flag==1)
            {
               flag=0;
               temp=reverse(temp);
                ans+=temp+" ";
                temp="";

            }
            else if(s.charAt(i)!=' '){

            temp+=s.charAt(i);
            flag=1;
            }
        }
        return ans.trim();
    }
    static String reverse(String s)
    {
        char c[]=s.toCharArray();
        int l=0,r=s.length()-1;
        while(l<r)
        {
            char temp=c[l];
            c[l]=c[r];
            c[r]=temp;
            l++;
            r--;
        }
        return new String(c);
    }
}



7)238. Product of Array Except Self


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int prod=1,zeroindex=-1,count=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=0)
            prod*=nums[i];
            else
            {
            zeroindex=i;
            count++;
            }
        }
        
        int arr[]=new int[nums.length];
        if(count>1)
        return arr;
        for(int i=0;i<nums.length;i++)
        {
            if(i<zeroindex)
            arr[i]=0;
            else if(i==zeroindex)
            arr[i]=prod;
            else if(zeroindex==-1)
            arr[i]=prod/nums[i];
            else
            arr[i]=0;
        }
        return arr;
    }
}


8)334. Increasing Triplet Subsequence


class Solution {
    public boolean increasingTriplet(int[] nums) {
        int firstMin = Integer.MAX_VALUE;
        int secondMin = Integer.MAX_VALUE;

        for (int num : nums) {
            if (num <= firstMin) {
                firstMin = num;
            } else if (num <= secondMin) {
                secondMin = num;
            } else {
                // We found a third element greater than both firstMin and secondMin
                return true;
            }
        }

        return false;
    }
}

9)443. String Compression

class Solution {
    public int compress(char[] chars) {
        int l = 0, r = 0, in = 0;
        
        while (l < chars.length) {
            r = l;
            // Find the end of the current character group
            while (r < chars.length && chars[l] == chars[r]) {
                r++;
            }
            chars[in++] = chars[l]; // Store the character

            // If the group length is greater than 1, store the length as characters
            if (r - l > 1) {
                String num = String.valueOf(r - l); // Length of the group
                for (char c : num.toCharArray()) {
                    chars[in++] = c;
                }
            }
            
            // Move the left pointer to the start of the next group
            l = r;
        }
        
        return in; // Return the new length of the compressed array
    }
}



Two pointer


1)283. Move Zeroes to the end


class Solution {
    public void moveZeroes(int[] nums) {
        for(int i=1;i<nums.length;i++)
        {
            int key=nums[i];
            int j=i-1;
            while(j>=0&&nums[j]==0)
            {
                nums[j+1]=nums[j];
                j--;
            }
            nums[j+1]=key;
        }
    }
}


		(or)

move zero to front


package programs;

import java.util.Arrays;

public class move_zeros_to_front {
    public static void main(String args[])
    {
        int arr[]={1,0,2,3,0,0,4,5,6,0,0};

        for(int i=1;i<arr.length;i++)
        {
            int key=arr[i];
            int j=i-1;
            while(j>=0&&key==0&&arr[j]!=0)
            {
                arr[j+1]=arr[j];
                j--;
            }

           arr[j+1]=key;
            System.out.println(Arrays.toString(arr));

        }

    }
}





2)392. Is Subsequence

class Solution {
    public boolean isSubsequence(String s, String t) {
        int l=0,r=0;
        while(r<t.length()&&l<s.length())
        {
           if(t.charAt(r)==s.charAt(l)){
            
            l++;
           }
           r++;
           

        }
        if(l==s.length())
        return true;
        return false;
    }
}


3)11. Container With Most Water


class Solution {
    public int maxArea(int[] height) {
        int maxh=0,l=0,r=height.length-1;
        while(l<r)
        {
            maxh=Math.max(maxh,(r-l)*Math.min(height[l],height[r]));
            if(height[l]<height[r])
            l++;
            else
            r--;
        }
        
        return maxh;
        
    }
}

4)1679. Max Number of K-Sum Pairs

class Solution {
    public int maxOperations(int[] nums, int k) {
        int l=0,r=nums.length-1,count=0;
        Arrays.sort(nums);
        while(l<r)
        {
            if(nums[l]+nums[r]==k){
            count++;
            l++;
            r--;
            }
            else if(nums[l]+nums[r]<k)
            l++;
          
            
            else
            r--;
        }
        return count;
    }
}

//extras

5)42. Trapping Rain Water

class Solution {
    public int trap(int[] height) {
        int ans=0;
        for(int i=0;i<height.length;i++)
        {
            int left=height[i];
            for(int j=0;j<i;j++)
             left=Math.max(height[j],left);
             int right=height[i];
            for(int k=i;k<height.length;k++)
             right=Math.max(height[k],right);

            ans+=Math.min(left,right)-height[i];
        }
        return ans;
    }
}


Sliding Window

//fixed size

1)643. Maximum Average Subarray I


class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum = 0;
       for(int i = 0; i < k; i ++) 
           sum += nums[i];
       int maxSum = sum;
       for(int i = k; i < nums.length; i ++) {
           sum += nums[i] - nums[i - k];
           maxSum = Math.max(maxSum, sum);
       }
       return (double)maxSum / k;
    }
}


2)1456. Maximum Number of Vowels in a Substring of Given Length

class Solution {
    public int maxVowels(String s, int k) {
        int count=0;
        for(int i=0;i<k;i++)
        {
            if(isvowel(s.charAt(i)))
            count++;
        }
        int max=count;
    for(int i=k;i<s.length();i++)
    {
            if(isvowel(s.charAt(i)))
            count++;
            if(isvowel(s.charAt(i-k)))
            count--;
            max=Math.max(max,count);
    }
    return max;
    }
    public static boolean isvowel(char c)
    {
        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')
        return true;
        return false;
    }
}


//variable size

3)1004. Max Consecutive Ones III

class Solution {
    public int longestOnes(int[] nums, int k) {
        int l=0,r=0,count=0,max=0;
        while(r<nums.length)
        {
            if(nums[r]==0)
            count++;
            while(count>k)
            {
                if(nums[l]==0)
                count--;
                l++;
            }
            max=Math.max(max,r-l+1);
            r++;
        }
        return max;
    }
}



4)1493. Longest Subarray of 1's After Deleting One Element

class Solution {
    public int longestSubarray(int[] nums) {
           int l=0,r=0,count=0,max=0;
        while(r<nums.length)
        {
            if(nums[r]==0)
            count++;
            while(count>1&&l<=r)
            {
                if(nums[l]==0)
                count--;
                l++;
            }
            max=Math.max(max,r-l);
            r++;
        }
        return max;
    }
}

//extras



5) ****TCS***

3. Longest Substring Without Repeating Characters

2 pointer and sliding window method:


class Solution {
    public int lengthOfLongestSubstring(String s) {
      Set<Character> set=new HashSet<>();
        
        int l=0,r=0,length=0,max=0;
        char c[]=new char[26];
        while(r<s.length())
        {
           
            while(set.contains(s.charAt(r)))
            {
                set.remove(s.charAt(l));
             l++;   
            }
          set.add(s.charAt(r));
            length=r-l+1;
           max= Math.max(max,length);
           
            r++;
        }
        return max;
    }
}



6)930. Binary Subarrays With Sum


class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        // to count  number of exact goal count subarrays
        return count(nums, goal) - count(nums, goal - 1);
    }

    int count(int[] nums, int goal) {
        int left = 0, sum = 0, count = 0;
         if(goal<0)
         return 0;
        // Iterate through the array using the right pointer
        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];  // Add the current element to the sum
         
            // Shrink the window from the left if sum exceeds the goal
            while (sum > goal) {
                sum -= nums[left];
                left++;
            }

            // counts the number of subarrays with sum less than or equal to goal
            count += right - left + 1;
        }
        
        return count;
    }
}

7)121. Best Time to Buy and Sell Stock


class Solution {
    public int maxProfit(int[] prices) {
        int min=10000,res=0;
        for(int i=0;i<prices.length;i++)
        {
            if(prices[i]<min)
            min=prices[i];
            if(res<prices[i]-min)
            res=prices[i]-min;
        }
        return res;
    }
}

8)122. Best Time to Buy and Sell Stock II

class Solution {
    public int maxProfit(int[] prices) {
        int res=0;
        for(int i=0;i<prices.length-1;i++)
        {
            if(prices[i]<prices[i+1])
            {
                res+=prices[i+1]-prices[i];
            }
        }
        return res;
    }
}

9)Longest Sub-Array with Sum K



class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        // code here
        int l=0,r=0,sum=0,max=0;
        while(r<arr.length)
        {
            sum+=arr[r];
            while(sum>k&&l<=r)
            {
                sum-=arr[l];
                l++;
                
            }
            if(sum==k)
            max=Math.max(max,r-l+1);
            r++;
        }
        return max;
    }
}
10)485. Max Consecutive Ones

normal method:

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count=0,max=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==1)
            count++;
            max=Math.max(max,count);
          
            if(nums[i]==0)
            count=0;
            
        }
        return max;
    }
}

		(or)
sliding and 2 pointer method:


class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int l=0,r=0,max=0,count=0;
        while(r<nums.length)
        {
            
            
           
            if(nums[r]==0)
            {
            
                max=Math.max(max,r-l);
                while(r<nums.length&&nums[r]==0)
                {
                    r++;
                }
                l=r;
                r--;
            }
           else if(r==nums.length-1)
            {
                System.out.print(r+" "+l);
                max=Math.max(max,r-l+1);
            }
            r++;
        }
        return max;
        
    }
}


prefix sum


1)1732. Find the Highest Altitude

class Solution {
    public int largestAltitude(int[] gain) {
        int s=0,max=0;
        for(int i=0;i<gain.length;i++)
        {
            s+=gain[i];
            max=Math.max(max,s);
        }
        return max;
    }
}

2)724. Find Pivot Index

class Solution {
    public int pivotIndex(int[] nums) {
        int sl=0,sr=0;
        for(int i=0;i<nums.length;i++)
        {
            sr+=nums[i];
        }
        for(int i=0;i<nums.length;i++)
        {
            sr-=nums[i];
            if(sl==sr)
            {
                return i;
            }
            sl+=nums[i];
        }
        return -1;
    }
}




HashMap/set


1)2215. Find the Difference of Two Arrays


class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> list1=new ArrayList<>();
        List<Integer> list2=new ArrayList<>();
      for(int i=0;i<nums1.length;i++)
      {
        while(i<nums1.length-1&&nums1[i]==nums1[i+1]){
        i++;
       
        }
        
        if(!search(nums2,nums1[i]))
        
        list1.add(nums1[i]);
      }
      ans.add(list1);

      
       for(int i=0;i<nums2.length;i++)
      {
        while(i<nums2.length-1&&nums2[i]==nums2[i+1]){
        i++;
       
        }
        if(!search(nums1,nums2[i]))
        
        list2.add(nums2[i]);
      }
      

  ans.add(list2);


        return ans;

    }

    public static boolean search(int nums[],int key)
    {
        int start=0,stop=nums.length-1;
        while(start<=stop)
        {
            int mid=start+(stop-start)/2;
            
            if(nums[mid]==key)
            return true;
            else if (nums[mid]< key)
            start=mid+1;
            else
            stop=mid-1;
        }
        return false;
    }
}



2)1207. Unique Number of Occurrences


class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        HashMap<Integer,Integer> map=new HashMap<>();
         for(int i=0;i<arr.length;i++)
         {
            if(!map.containsKey(arr[i]))
            map.put(arr[i],1);
            else
            map.put(arr[i],map.get(arr[i])+1);
         }
         Set<Integer> occurrences = new HashSet<>(map.values());
         return map.size()==occurrences.size();
        
        
    }
}



3)1657. Determine if Two Strings Are Close

class Solution {
    public boolean closeStrings(String word1, String word2) {
        if(word1.length()!=word2.length())
        return false;
        int ch1[]=new int[26];
        int ch2[]=new int[26];
        for(int i=0;i<word1.length();i++)
        ch1[word1.charAt(i)-'a']++;
        for(int i=0;i<word2.length();i++)
        ch2[word2.charAt(i)-'a']++;

        for(int i=0;i<ch1.length;i++)
        {
            if(ch1[i]!=0&&ch2[i]==0||ch1[i]==0&&ch2[i]!=0)
            return false;
        }
        Arrays.sort(ch1);
        Arrays.sort(ch2);
        for(int i=0;i<ch1.length;i++)
        {
            if(ch1[i]!=ch2[i])
            return false;
        }
        return true;
    }
}

4)2352. Equal Row and Column Pairs

class Solution {
    public int equalPairs(int[][] grid) {
        int tgrid[][]=new int[grid.length][grid.length];
        int c=0;
        for(int i=0;i<grid.length;i++)
        {
            
            for(int j=0;j<grid[0].length;j++)
            {
                tgrid[i][j]=grid[j][i];
                
            }
        }

        for(int i=0;i<grid.length;i++)
        {
            
            for(int j=0;j<grid[0].length;j++)
            {
               if(check(grid[i],tgrid[j]))
               c++;
                
            }
        }

        return c;
    }
    public static boolean check(int[] a,int[] b)
    {
        for(int i=0;i<a.length;i++)
        {
            if(a[i]!=b[i])
            return false;

        }
        return true;
    }
}


Binary search


1)374. Guess Number Higher or Lower

/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
         int start = 0;
        int end = n-1;
        while(start<=end){
            int mid = start + (end - start)/2;
            int num = guess(mid);
            if(num == 0){
                return mid;
            }else if(num == -1){
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
        return start;
    }
}

2)2300. Successful Pairs of Spells and Potions


import java.util.Arrays;

class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        int n = spells.length;
        int m = potions.length;
        int[] ans = new int[n];
        
        // Sort the potions array to allow binary search
        Arrays.sort(potions);
        
        // For each spell, we need to find how many potions are successful
        for (int i = 0; i < n; i++) {
            long target = (success + spells[i] - 1) / spells[i];  // To ensure correct rounding up that is to find the ceil value while division

            // Perform binary search to find the first potion that satisfies the condition
            int low = 0, high = m - 1;
            while (low <= high) {
                int mid = low + (high - low) / 2;
                if (potions[mid] >= target) {
                    high = mid - 1;  // Move high to mid - 1 to find the first valid potion
                } else {
                    low = mid + 1;  // Otherwise, look to the right
                }
            }
            
            // The number of successful potions is all potions from 'low' to the end
            ans[i] = m - low;  // Correct count of successful potions
        }
        
        return ans;
    }
}



3)162. Find Peak Element

class Solution {
    public int findPeakElement(int[] nums) {
         int st=0;
        int sp=nums.length - 1;
        while(st<sp)
        {
          int  mid=st+(sp-st)/2;
            if(nums[mid]>nums[mid+1])
             sp=mid;
             else
                 st=mid+1;
                  
         }
        
        return st;
    }
}

4)875. Koko Eating Bananas

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
    // similar to split array largest sum
    int start=1,stop=0;
    for(int i=0;i<piles.length;i++)
    {
        if(stop<piles[i])
        stop=piles[i];
    }
    while(start<=stop)
    {
    int mid=start+(stop-start)/2;//mid is the possible set of hpurs
    int totalh=calculate(piles,mid);
    if(totalh>h)
    start=mid+1;
    else
    stop=mid-1;
    }
    return start;
    }
    static int calculate(int[] piles,int mid)
    {
        int totalh=0;
        for(int i=0;i<piles.length;i++)
        {
            totalh+=Math.ceil((double)piles[i]/(double)mid); //double type is important
        }
        return totalh;
    }
}



Bit manipulation

1)338. Counting Bits

class Solution {
    public int[] countBits(int n) {
        int arr[]=new int[n+1];
        for(int i=1;i<=n;i++)
        {
            arr[i]=func(i);
        }
        return arr;
    }
    static int func(int n)
    {
        int c=0;
        while(n!=0)
        {
            c+=n&1;
            n=n>>1;
        }
        return c;
    }
    
}


2)136. Single Number

class Solution {
    public int singleNumber(int[] nums) {
        int ans=0;
        for(int i=0;i<nums.length;i++)
        {
            ans^=nums[i];
        }
        return ans;
    }
}


3)1318. Minimum Flips to Make a OR b Equal to c


class Solution {
    public int minFlips(int a, int b, int c) {
        int count=0;
        while(c!=0||a!=0||b!=0)
        {
            if((c&1)==1)
            {
                if((a&1)==0&&(b&1)==0){
                count++;
                  System.out.println(count);}
               
            }
            else
            {
                if((a&1)==1)
                {
                    count++;
                    if((b&1)==1)
                    count++;
                   
                }
               else  if((b&1)==1)
                 count++;
                   

            }
            c=c>>1;
            a=a>>1;
            b=b>>1;
        }
        return count;
    }
}

Stack

1)2390. Removing Stars From a String

class Solution {
    public String removeStars(String s) {
        String str="";
        for(int i=0;i<s.length();i++)
        {
           char ch=s.charAt(i);
           if(ch!='*')
           {   
               str+=String.valueOf(ch);

           }
           else
           {
               str=str.substring(0,str.length()-1);
           }
        }
        return str;
    }
}

2)735. Asteroid Collision


class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> s =new Stack<>();
        if(asteroids.length!=0)
        s.push(asteroids[0]);
        for(int i=1;i<asteroids.length;i++)
        {
            if(!s.isEmpty()){
          if(s.peek()>0&&asteroids[i]>0)
          s.push(asteroids[i]);
          else if(s.peek()<0&&asteroids[i]<0)
          s.push(asteroids[i]);
        else  if(s.peek()>0&&asteroids[i]<0){
           if(Math.abs(asteroids[i])>s.peek()){
           s.pop();
           
         if(s.isEmpty()){
           s.push(asteroids[i]);
           continue;}
           i--;
           }
           else if(Math.abs(asteroids[i])==s.peek())
           s.pop();
          
           else
           continue;

        }
        else if(s.peek()<0&&asteroids[i]>0)
        s.push(asteroids[i]);
    
      
            }
            else if(i<=asteroids.length-1)
            s.push(asteroids[i]);
       
        }
        Integer[] arr=s.toArray(new Integer[s.size()]);
        int a[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        a[i]=arr[i];
        return a;
    }
}


3)394. Decode String


class Solution {
    public String decodeString(String s) {
        Stack<Integer> st = new Stack<>();
        Stack<StringBuilder> st1 = new Stack<>();
        StringBuilder sb = new StringBuilder();
        int n = 0;

        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                n = n * 10 + (c - '0');
                System.out.println(n);
            } else if (c == '[') {
                st.push(n);
                n = 0;
                st1.push(sb);
                sb = new StringBuilder();
            } else if (c == ']') {
                int k = st.pop();
                StringBuilder temp = sb;
                sb = st1.pop();
                while (k-- > 0) {
                    sb.append(temp);
                }
            } else {
                sb.append(c);
            }
        }

        return sb.toString();
    }
}


Queue

1)933. Number of Recent Calls

class RecentCounter {
  Queue<Integer> q;
    public RecentCounter() {
        q=new LinkedList<Integer>();
    }
    
    public int ping(int t) {
        q.add(t);
        while(q.peek()<t-3000)
        q.remove();
        return q.size();
    }
}

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.ping(t);
 */

2)649. Dota2 Senate

class Solution {
    public String predictPartyVictory(String senate) {
        Queue<Integer> r=new LinkedList<>();
        Queue<Integer> d=new LinkedList<>();
        int n=senate.length();
        for(int i=0;i<senate.length();i++)
        {
            if(senate.charAt(i)=='R')
            r.add(i);
            else
            d.add(i);
        }
        while(!r.isEmpty() &&!d.isEmpty())
        {
            if(r.peek()<d.peek())
            r.add(n++);
            else
            d.add(n++);
            r.remove();
            d.remove();
        }
        return (r.isEmpty())?("Dire"):("Radiant");
    }
}
